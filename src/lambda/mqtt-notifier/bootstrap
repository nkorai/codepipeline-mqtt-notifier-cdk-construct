#!/bin/sh
set -e
set -o pipefail

TAILSCALE_ROOT=/tmp/tailscale
mkdir -p "$TAILSCALE_ROOT"

# Fetch secret with Node.js helper
if [ -n "$TAILSCALE_AUTH_KEY_SECRET_ARN" ]; then
  echo "[INFO] Fetching Tailscale auth key..."
  node /var/task/get-secret.mjs
  TS_AUTH_KEY=$(cat /tmp/tailscale-auth-key)
else
  echo "[INFO] No secret ARN set, skipping Tailscale"
  exec /var/lang/bin/node index.js
fi

# Validate key
if [ "$TS_AUTH_KEY" = "REPLACE_WITH_TAILSCALE_AUTHKEY" ] || [ -z "$TS_AUTH_KEY" ]; then
  echo "[ERROR] Tailscale auth key not configured properly"
  exit 1
fi

# Start Tailscale daemon
/var/task/tailscaled \
  --tun=userspace-networking \
  --socks5-server=localhost:1055 \
  --state="$TAILSCALE_ROOT/tailscaled.state" \
  --statedir="$TAILSCALE_ROOT" \
  --socket="$TAILSCALE_ROOT/tailscaled.sock" &
sleep 2

# Bring up Tailscale
/var/task/tailscale --socket="$TAILSCALE_ROOT/tailscaled.sock" up \
  --auth-key="$TS_AUTH_KEY" \
  --hostname=mqtt-lambda \
  --accept-routes

# Resolve MQTT_BROKER_HOST if it's a hostname (not an IP)
# echo "[INFO] Resolving MQTT broker hostname $MQTT_BROKER_HOST via drill..."
# RESOLVED_IP=$(drill "$MQTT_BROKER_HOST" +short | grep '^[0-9]' | head -n1)
# if [ -n "$RESOLVED_IP" ]; then
#   echo "[INFO] Resolved $MQTT_BROKER_HOST to $RESOLVED_IP"
#   export MQTT_BROKER_HOST="$RESOLVED_IP"
# else
#   echo "[WARN] Could not resolve $MQTT_BROKER_HOST via drill. Using as-is."
# fi

echo "[INFO] Tailscale started. Invoking Lambda..."
ALL_PROXY="socks5://localhost:1055" exec node index.js
