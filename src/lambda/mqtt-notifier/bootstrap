#!/bin/bash
set -x
set -euo pipefail

echo "[INFO] Launching tailscale-setup.sh in background if needed..."
/var/task/tailscale-setup.sh &

sleep 2
echo "[INFO] Tailscale init complete, entering Lambda event loop..."

while true; do
  echo "[INFO] Polling for next invocation..."
  RESPONSE=$(curl -s -i -X GET "http://127.0.0.1:9001/2018-06-01/runtime/invocation/next")

  echo "[DEBUG] Full raw RESPONSE:"
  echo "$RESPONSE"

  REQUEST_ID=$(echo "$RESPONSE" | grep -i '^Lambda-Runtime-Aws-Request-Id:' | awk '{ print $2 }' | tr -d '\r')
  EVENT=$(echo "$RESPONSE" | sed -n '/^\r\{0,1\}$/,$p' | tail -n +2)

  echo "[INFO] Handling invocation ID: $REQUEST_ID"
  echo "[DEBUG] Raw EVENT payload:"
  echo "$EVENT"

  # Run Node.js with the event piped into stdin
  RESULT_FILE=$(mktemp)
  ERROR_FILE=$(mktemp)

  echo "[DEBUG] bootstrap ENV:"
  env | grep -E 'MQTT|AWS|TAILSCALE'

  if echo "$EVENT" | env -i $(env -0 | xargs -0)  ALL_PROXY="socks5://localhost:1055" node -e '
    const { handler } = require("./index.js");
    const chunks = [];
    process.stdin.on("data", chunk => chunks.push(chunk));
    process.stdin.on("end", async () => {
      try {
        const event = JSON.parse(chunks.join(""));
        console.log("[DEBUG] Parsed event object:", event);
        const result = await handler(event);
        console.log(JSON.stringify(result ?? {}));
      } catch (err) {
        console.error("[FATAL]", err);
        process.exit(1);
      }
    });
  ' >"$RESULT_FILE" 2>"$ERROR_FILE"; then
    echo "[INFO] Successfully executed handler, sending response..."
    curl -s -X POST "http://127.0.0.1:9001/2018-06-01/runtime/invocation/$REQUEST_ID/response" \
      -H "Content-Type: application/json" \
      --data-binary "@$RESULT_FILE"
  else
    echo "[ERROR] Handler failed. Capturing error message..."
    ERROR_MESSAGE=$(cat "$ERROR_FILE" | tr -d '\n' | sed 's/"/\\"/g')
    echo "[DEBUG] Captured ERROR_MESSAGE: $ERROR_MESSAGE"
    ERROR_JSON="{\"errorType\": \"RuntimeError\", \"errorMessage\": \"$ERROR_MESSAGE\"}"
    curl -s -X POST "http://127.0.0.1:9001/2018-06-01/runtime/invocation/$REQUEST_ID/error" \
      -H "Content-Type: application/json" \
      --data-binary "$ERROR_JSON"
  fi

  echo "[INFO] Cleaning up temporary files..."
  rm -f "$RESULT_FILE" "$ERROR_FILE"
done
